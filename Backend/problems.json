[
  {
    "id": 1,
    "title": "Sum of Two Numbers",
    "description": "Write a function that returns the sum of two numbers.",
    "difficulty": "easy",
    "concepts": ["arithmetic", "basic_functions"],
    "time_limit_ms": 1000,
    "memory_limit_mb": 64,
    "starter_code": {
      "python": "def sum_two(a, b):\n    # your code here\n    pass",
      "java": "public class Solution {\n    public int sumTwo(int a, int b) {\n        // your code here\n        return 0;\n    }\n}"
    },
    "languages": ["python", "java"],
    "test_cases": [
      {"input": [2, 3], "output": 5, "type": "public"},
      {"input": [10, -2], "output": 8, "type": "public"},
      {"input": [0, 0], "output": 0, "type": "hidden"},
      {"input": [-5, -3], "output": -8, "type": "hidden"},
      {"input": [1000000, 2000000], "output": 3000000, "type": "edge"}
    ]
  },
  {
    "id": 2,
    "title": "Reverse a String",
    "description": "Write a function to reverse a string.",
    "difficulty": "easy",
    "concepts": ["strings", "string_manipulation"],
    "time_limit_ms": 2000,
    "memory_limit_mb": 64,
    "starter_code": {
      "python": "def reverse_string(s):\n    # your code here\n    pass",
      "java": "public class Solution {\n    public String reverseString(String s) {\n        // your code here\n        return \"\";\n    }\n}"
    },
    "languages": ["python", "java"],
    "test_cases": [
      {"input": ["hello"], "output": "olleh", "type": "public"},
      {"input": ["world"], "output": "dlrow", "type": "public"},
      {"input": [""], "output": "", "type": "hidden"},
      {"input": ["a"], "output": "a", "type": "hidden"},
      {"input": ["racecar"], "output": "racecar", "type": "edge"},
      {"input": ["12345"], "output": "54321", "type": "edge"}
    ]
  },
  {
    "id": 3,
    "title": "Find Maximum in Array",
    "description": "Write a function to find the maximum element in an array of numbers.",
    "difficulty": "easy",
    "concepts": ["arrays", "loops", "comparisons"],
    "time_limit_ms": 3000,
    "memory_limit_mb": 128,
    "starter_code": {
      "python": "def find_max(nums):\n    # your code here\n    pass",
      "java": "public class Solution {\n    public int findMax(int[] nums) {\n        // your code here\n        return 0;\n    }\n}"
    },
    "languages": ["python", "java"],
    "test_cases": [
      {"input": [[1, 2, 3, 4]], "output": 4, "type": "public"},
      {"input": [[-1, -5, -2]], "output": -1, "type": "public"},
      {"input": [[5]], "output": 5, "type": "hidden"},
      {"input": [[100, 50, 200, 1]], "output": 200, "type": "hidden"},
      {"input": [[-10, -20, -5, -30]], "output": -5, "type": "edge"},
      {"input": [[0, 0, 0, 0]], "output": 0, "type": "edge"}
    ]
  },
  {
    "id": 4,
    "title": "Fibonacci Number",
    "description": "Write a function to return the nth Fibonacci number (0-indexed).",
    "difficulty": "medium",
    "concepts": ["recursion", "dynamic_programming", "mathematics"],
    "time_limit_ms": 5000,
    "memory_limit_mb": 128,
    "starter_code": {
      "python": "def fibonacci(n):\n    # your code here\n    # Hint: F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2)\n    pass",
      "java": "public class Solution {\n    public int fibonacci(int n) {\n        // your code here\n        // Hint: F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2)\n        return 0;\n    }\n}"
    },
    "languages": ["python", "java"],
    "test_cases": [
      {"input": [0], "output": 0, "type": "public"},
      {"input": [1], "output": 1, "type": "public"},
      {"input": [5], "output": 5, "type": "public"},
      {"input": [2], "output": 1, "type": "hidden"},
      {"input": [8], "output": 21, "type": "hidden"},
      {"input": [10], "output": 55, "type": "hidden"},
      {"input": [15], "output": 610, "type": "edge"},
      {"input": [20], "output": 6765, "type": "stress"}
    ]
  },
  {
    "id": 5,
    "title": "Check Palindrome",
    "description": "Write a function to check if a string is a palindrome (reads the same forward and backward).",
    "difficulty": "medium",
    "concepts": ["strings", "two_pointers", "string_manipulation"],
    "time_limit_ms": 3000,
    "memory_limit_mb": 128,
    "starter_code": {
      "python": "def is_palindrome(s):\n    # your code here\n    # Hint: Compare characters from start and end\n    pass",
      "java": "public class Solution {\n    public boolean isPalindrome(String s) {\n        // your code here\n        // Hint: Compare characters from start and end\n        return false;\n    }\n}"
    },
    "languages": ["python", "java"],
    "test_cases": [
      {"input": ["racecar"], "output": true, "type": "public"},
      {"input": ["hello"], "output": false, "type": "public"},
      {"input": [""], "output": true, "type": "hidden"},
      {"input": ["a"], "output": true, "type": "hidden"},
      {"input": ["abba"], "output": true, "type": "hidden"},
      {"input": ["abc"], "output": false, "type": "hidden"},
      {"input": ["A man a plan a canal Panama"], "output": false, "type": "edge"},
      {"input": ["Was it a car or a cat I saw"], "output": false, "type": "edge"}
    ]
  },
  {
    "id": 6,
    "title": "Two Sum",
    "description": "Given an array of integers and a target sum, return indices of two numbers that add up to the target.",
    "difficulty": "medium",
    "concepts": ["arrays", "hash_maps", "two_pointers"],
    "time_limit_ms": 4000,
    "memory_limit_mb": 128,
    "starter_code": {
      "python": "def two_sum(nums, target):\n    # your code here\n    # Return indices as [i, j] where nums[i] + nums[j] = target\n    pass",
      "java": "public class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // your code here\n        // Return indices as [i, j] where nums[i] + nums[j] = target\n        return new int[]{};\n    }\n}"
    },
    "languages": ["python", "java"],
    "test_cases": [
      {"input": [[2, 7, 11, 15], 9], "output": [0, 1], "type": "public"},
      {"input": [[3, 2, 4], 6], "output": [1, 2], "type": "public"},
      {"input": [[3, 3], 6], "output": [0, 1], "type": "hidden"},
      {"input": [[-1, -2, -3, -4, -5], -8], "output": [2, 4], "type": "hidden"},
      {"input": [[1, 2], 3], "output": [0, 1], "type": "edge"},
      {"input": [[5, 5, 5, 5], 10], "output": [0, 1], "type": "edge"}
    ]
  },
  {
    "id": 7,
    "title": "Valid Parentheses",
    "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
    "difficulty": "medium",
    "concepts": ["stacks", "strings", "data_structures"],
    "time_limit_ms": 3000,
    "memory_limit_mb": 128,
    "starter_code": {
      "python": "def is_valid(s):\n    # your code here\n    # Hint: Use a stack to track opening brackets\n    pass",
      "java": "public class Solution {\n    public boolean isValid(String s) {\n        // your code here\n        // Hint: Use a stack to track opening brackets\n        return false;\n    }\n}"
    },
    "languages": ["python", "java"],
    "test_cases": [
      {"input": ["()"], "output": true, "type": "public"},
      {"input": ["()[]{}"], "output": true, "type": "public"},
      {"input": ["(]"], "output": false, "type": "public"},
      {"input": [""], "output": true, "type": "hidden"},
      {"input": ["{[]}"], "output": true, "type": "hidden"},
      {"input": ["([)]"], "output": false, "type": "hidden"},
      {"input": ["(((((((((("], "output": false, "type": "edge"},
      {"input": ["}}}}}}}}}}"], "output": false, "type": "edge"}
    ]
  },
  {
    "id": 8,
    "title": "Binary Search",
    "description": "Implement binary search to find the index of a target value in a sorted array. Return -1 if not found.",
    "difficulty": "medium",
    "concepts": ["arrays", "binary_search", "algorithms"],
    "time_limit_ms": 4000,
    "memory_limit_mb": 128,
    "starter_code": {
      "python": "def binary_search(nums, target):\n    # your code here\n    # nums is sorted in ascending order\n    pass",
      "java": "public class Solution {\n    public int binarySearch(int[] nums, int target) {\n        // your code here\n        // nums is sorted in ascending order\n        return -1;\n    }\n}"
    },
    "languages": ["python", "java"],
    "test_cases": [
      {"input": [[1, 2, 3, 4, 5], 3], "output": 2, "type": "public"},
      {"input": [[1, 2, 3, 4, 5], 6], "output": -1, "type": "public"},
      {"input": [[], 1], "output": -1, "type": "hidden"},
      {"input": [[1], 1], "output": 0, "type": "hidden"},
      {"input": [[1, 3, 5, 7, 9], 1], "output": 0, "type": "edge"},
      {"input": [[1, 3, 5, 7, 9], 9], "output": 4, "type": "edge"},
      {"input": [[-5, -3, -1, 0, 2, 4], -3], "output": 1, "type": "edge"}
    ]
  },
  {
    "id": 9,
    "title": "Longest Common Subsequence",
    "description": "Find the length of the longest common subsequence between two strings.",
    "difficulty": "hard",
    "concepts": ["dynamic_programming", "strings", "algorithms"],
    "time_limit_ms": 8000,
    "memory_limit_mb": 256,
    "starter_code": {
      "python": "def longest_common_subsequence(text1, text2):\n    # your code here\n    # Use dynamic programming\n    pass",
      "java": "public class Solution {\n    public int longestCommonSubsequence(String text1, String text2) {\n        // your code here\n        // Use dynamic programming\n        return 0;\n    }\n}"
    },
    "languages": ["python", "java"],
    "test_cases": [
      {"input": ["abcde", "ace"], "output": 3, "type": "public"},
      {"input": ["abc", "abc"], "output": 3, "type": "public"},
      {"input": ["abc", "def"], "output": 0, "type": "public"},
      {"input": ["", "abc"], "output": 0, "type": "hidden"},
      {"input": ["abc", ""], "output": 0, "type": "hidden"},
      {"input": ["a", "a"], "output": 1, "type": "hidden"},
      {"input": ["programming", "grading"], "output": 4, "type": "edge"},
      {"input": ["abcdefghijklmnop", "ace"], "output": 3, "type": "stress"}
    ]
  },
  {
    "id": 10,
    "title": "Merge Sorted Arrays",
    "description": "Merge two sorted arrays into one sorted array.",
    "difficulty": "hard",
    "concepts": ["arrays", "sorting", "two_pointers", "merge"],
    "time_limit_ms": 5000,
    "memory_limit_mb": 256,
    "starter_code": {
      "python": "def merge_sorted_arrays(arr1, arr2):\n    # your code here\n    # Return merged sorted array\n    pass",
      "java": "public class Solution {\n    public int[] mergeSortedArrays(int[] arr1, int[] arr2) {\n        // your code here\n        // Return merged sorted array\n        return new int[]{};\n    }\n}"
    },
    "languages": ["python", "java"],
    "test_cases": [
      {"input": [[1, 3, 5], [2, 4, 6]], "output": [1, 2, 3, 4, 5, 6], "type": "public"},
      {"input": [[], [1, 2, 3]], "output": [1, 2, 3], "type": "public"},
      {"input": [[1, 2, 3], []], "output": [1, 2, 3], "type": "hidden"},
      {"input": [[], []], "output": [], "type": "hidden"},
      {"input": [[1], [2]], "output": [1, 2], "type": "edge"},
      {"input": [[1, 1, 1], [2, 2, 2]], "output": [1, 1, 1, 2, 2, 2], "type": "edge"},
      {"input": [[-5, -3, -1], [-4, -2, 0]], "output": [-5, -4, -3, -2, -1, 0], "type": "edge"}
    ]
  }
]
