{
  "name": "Data Structures",
  "color": "blue",
  "questions": [
    {
      "question": "What is the time complexity of searching in a balanced Binary Search Tree?",
      "choices": ["O(n)", "O(log n)", "O(n log n)", "O(1)"],
      "correct": "O(log n)",
      "explanation": "In a balanced BST, the height is log n, so search operations take O(log n) time."
    },
    {
      "question": "Which data structure follows the LIFO (Last In First Out) principle?",
      "choices": ["Queue", "Stack", "Array", "Linked List"],
      "correct": "Stack",
      "explanation": "Stack follows LIFO - the last element added is the first one to be removed."
    },
    {
      "question": "What is the worst-case time complexity of Quick Sort?",
      "choices": ["O(n log n)", "O(n²)", "O(n)", "O(log n)"],
      "correct": "O(n²)",
      "explanation": "Quick Sort has O(n²) worst-case when the pivot is always the smallest or largest element."
    },
    {
      "question": "In which data structure is BFS (Breadth-First Search) typically implemented?",
      "choices": ["Stack", "Queue", "Array", "Tree"],
      "correct": "Queue",
      "explanation": "BFS uses a queue to process nodes level by level in a breadth-first manner."
    },
    {
      "question": "What is a hash collision?",
      "choices": ["When two keys hash to the same index", "When hash function fails", "When hash table is full", "When key is not found"],
      "correct": "When two keys hash to the same index",
      "explanation": "A hash collision occurs when two different keys produce the same hash value."
    },
    {
      "question": "What is the space complexity of a recursive function that calls itself n times?",
      "choices": ["O(1)", "O(log n)", "O(n)", "O(n²)"],
      "correct": "O(n)",
      "explanation": "Each recursive call adds a frame to the call stack, resulting in O(n) space complexity."
    },
    {
      "question": "Which data structure is best for implementing undo functionality?",
      "choices": ["Queue", "Stack", "Array", "Hash Table"],
      "correct": "Stack",
      "explanation": "Stack's LIFO property makes it perfect for undo operations - last action is undone first."
    },
    {
      "question": "What is the average time complexity of hash table operations?",
      "choices": ["O(1)", "O(log n)", "O(n)", "O(n log n)"],
      "correct": "O(1)",
      "explanation": "With a good hash function and load factor, hash table operations are O(1) on average."
    }
  ]
}
